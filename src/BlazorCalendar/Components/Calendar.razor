@inject ICalendarEventsProvider eventsProvider

<!-- Calendar -->
            <div class="calendar">
                <div class="row">
                    <div class="col-sm-12 col-lg-2">
                        <select  name="" id="" class="fluent-input" @onchange="SelectYear">
                            @for (int i = 2010; i < 2025; i++)
                            {
                                <option>@i</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-12 col-lg-2">
                        <select name="" id="" class="fluent-input" @onchange="SelectMonth">
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">Sepetemper</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                    </div>
                </div>
            <table class="calendar-table">
                <thead>
                    <tr>
                        <td>Sun</td>
                        <td>Mon</td>
                        <td>Tue</td>
                        <td>Wed</td>
                        <td>Thu</td>
                        <td>Fri</td>
                        <td>Sat</td>
                    </tr>
                </thead>
                <tbody>
                    @for (int r = 0; r < rowsCount; r++)
                    {
                        <tr>
                            @foreach (var item in days.Skip(r * 7).Take(7))
                            {
                                <td>@DayTemplate(item)</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

@code 
{

    [Parameter]
    public RenderFragment<CalendarDay> DayTemplate { get; set; }


    private int year = 2020;
    private int month = 05;
    private List<CalendarDay> days = new List<CalendarDay>();
    private int rowsCount = 0;

    async Task SelectYear(ChangeEventArgs e)
    {
        year = Convert.ToInt32(e.Value.ToString());
        // Render Calendar
        UpdateCalendar();

        await SyncEventsFromExternalProviderToCalendar();
    }

    async Task SelectMonth(ChangeEventArgs e)
    {
        month = Convert.ToInt32(e.Value.ToString());
        // Render Calendar
        UpdateCalendar();

        await SyncEventsFromExternalProviderToCalendar();
    }

    void UpdateCalendar()
    {
        days = new List<CalendarDay>();

        // Calculate the number of empty days 
        var firstDayDate = new DateTime(year, month, 1);
        int weekDayNumber = (int)firstDayDate.DayOfWeek;
        int numberOfEmptyDays = 0;
        if (weekDayNumber == 7) // Sunday 
        {
            numberOfEmptyDays = 0;
        }
        else
        {
            numberOfEmptyDays = weekDayNumber;
        }

        // Add the empty days 
        for (int i = 0; i < numberOfEmptyDays; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = 0,
                IsEmpty = true
            });
        }

        // Add the month days 
        int numberOfDaysInMonth = DateTime.DaysInMonth(year, month);

        for (int i = 0; i < numberOfDaysInMonth; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = i + 1,
                IsEmpty = false,
                Date = new DateTime(year, month, i + 1),
                Events = new List<CalendarEvent>()
            });
        }

        // 2- Calcualte the number of rows 
        int remaning = days.Count % 7;
        if (remaning == 0)
            rowsCount = days.Count / 7;
        else
            rowsCount = Convert.ToInt32(days.Count / 7) + 1;

        Console.WriteLine($"Total Rows: {rowsCount} | Number of Empty Days {numberOfEmptyDays} | Month Days {numberOfDaysInMonth}");

    }

    async Task SyncEventsFromExternalProviderToCalendar()
    {
        // fetch the events for the month 
        var events = await eventsProvider.GetEventsInMonthAsync(year, month);
        
        if(events == null || events.Count() == 0)
            return; 

        foreach (var day in days)
        {
            if (day.IsEmpty)
                continue;

            var eventsInDay = events.Where(e => e.StartDate.Date <= day.Date && e.EndDate.Date >= day.Date);
            if (eventsInDay.Any())
            {
                day.Events.AddRange(eventsInDay);
            }
        }
    }
}